from __future__ import print_function
import sys
import atexit
import os
import shutil
import glob
from xml.dom.minidom import parse
import ctypes 
from ctypes import cdll
from collections import defaultdict
if sys.version_info[0] < 3:
  from thread import get_ident as threadid
else:
  from threading import get_ident as threadid

USRFUNC_EV = 60000100

ExtraeHome     = "@sub_PREFIX@"

ExtraeHomeEnv  = os.getenv("EXTRAE_HOME")
if (ExtraeHomeEnv):
  ExtraeHome   = ExtraeHomeEnv

CEventsEnv     = os.getenv("EXTRAE_PY_CEVENTS")
TraceCEvents   = False
if (CEventsEnv != None) and ((CEventsEnv.lower() == "yes") or (CEventsEnv.lower() == "enabled") or (CEventsEnv.lower() == "true") or (CEventsEnv == "1")):
  TraceCEvents = True

LibrarySeq     = ExtraeHome + "/lib/libseqtrace.so"
LibrarySubProc = "./.libseqtrace-subprocess.so" 

pyEx_active_profile = None
Extrae = dict()
Traced_Functions = [] 
Number_of_Traced_Functions = 0
MPITS = "./TRACE.mpits"
MultiprocessingEnabled = False
CallsProfile = defaultdict(int)
CheckNested = dict()

### Load the sequential tracing library
def LoadExtrae(Library):
  return cdll.LoadLibrary(Library)

### Called when a profiling event triggers (tracing mode)
def pyEx_trace_hook(frame, event, arg):
  global Extrae

  if ((event == "call") or (event == "return") or ((event == "c_call") and TraceCEvents) or ((event == "c_return") and TraceCEvents)):
    tid = threadid()

    function = frame.f_code.co_name
    file = frame.f_code.co_filename
    #print ("EV:", event, "; FUNC:", frame.f_code.co_name, "; LINE:", frame.f_lineno, "; FILE:", file, "; PID:", os.getpid())  #, "; ARG:", arg

    if (event == "call"):
      CheckNested[tid] = function
    elif (((event == "c_call") or (event == "c_return")) and (tid in CheckNested) and (CheckNested[tid] != None) and (function == CheckNested[tid])):
      # Ignore c_call inside call for the same function
      return
    elif (event == "return"):
      CheckNested[tid] = None

    ### Detect a process spawn from the multiprocessing module
    if (MultiprocessingEnabled) and (function == "run") and ('/'.join(file.split('/')[-2:]) == "multiprocessing/process.py"):
      if (event == "call"):
        ### Load a copy of the sequential library on the subprocess
        Extrae[os.getpid()] = LoadExtrae(LibrarySubProc)
      elif (event == "return"):
        ### The subprocesses call the exit handler manually (atexit doesn't work for them)
        pyEx_trace_fini()

    ### Detect the call to a traced function
    if Extrae and (os.getpid() in Extrae) and function and Traced_Functions and function in Traced_Functions:   
      #caller = frame.f_back
      #if caller:
      #  caller_line_no  = caller.f_lineno
      #  caller_filename = caller.f_code.co_filename
      #  print ("-> called from "+caller_filename+" line "+str(caller_line_no))

       ### Get the function identifier
       function_id = Traced_Functions.index(function) + 1
       if ((event == "return") or (event == "c_return")):
         function_id = 0

       ### Emit an event into the trace
       Extrae[os.getpid()].@sub_Extrae_eventandcounters@( USRFUNC_EV, function_id )

### Called when a profiling event triggers (profiling mode)
def pyEx_profile_hook(frame, event, arg):
  global CallsProfile

  if ((event == "call") or (event == "c_call")):
    function = frame.f_code.co_name
    try:
      CallsProfile[function] += 1
    except:
      pass

### Called when the program terminates (tracing mode)
def pyEx_trace_fini(Master=False):
  global Extrae
  global MultiprocessingEnabled
  global Number_of_Traced_Functions
  global Traced_Functions

  if (Extrae and os.getpid() in Extrae):
    if (Number_of_Traced_Functions > 0):
      ### Emit the user functions information to the PCF file

      nvalues = len(Traced_Functions)+1
      description = "User functions"
      values = (ctypes.c_ulonglong * nvalues)()
      description_values = (ctypes.c_char_p * nvalues)()
      values[0] = 0
      description_values[0] = "End".encode('utf-8')
      for i in range(1, nvalues):
        values[i] = i
        description_values[i] = Traced_Functions[i-1].encode('utf-8')

      Extrae[os.getpid()].Extrae_define_event_type( ctypes.pointer(ctypes.c_uint(USRFUNC_EV)),
                                       ctypes.c_char_p(description.encode('utf-8')),
                                       ctypes.pointer(ctypes.c_uint(nvalues)),
                                       ctypes.pointer(values),
                                       ctypes.pointer(description_values) )
    ### Finalize the tracing library
    Extrae[os.getpid()].Extrae_fini()

    ### Patch the MPITS file including all subprocesses
    if (MultiprocessingEnabled) and (Master):
      fo = open(MPITS, "w+")
      AllMPITS = sorted(glob.glob('set-*/*.mpit'))
      for i, mpit in enumerate(AllMPITS):
        fo.write( os.path.abspath(mpit) + " named\n" )
        if (i < len(AllMPITS)-1):
          fo.write( "--\n" )
      os.unlink(LibrarySubProc)

### Called when the program terminates (profiling mode)
def pyEx_profile_fini():
  global CallsProfile

  print ('%-12s%-s' % ('Count', 'Function'))
  print ('====================')
  for call in sorted(CallsProfile.items(), key=lambda kv:kv[1], reverse=True):
    func   = call[0]
    ncount = call[1]
    print ('%-12i%-s' % (ncount, func))


### Blocks the profiler hook from triggering
def pyEx_profile_pause():
  global pyEx_active_profile
  if (pyEx_active_profile == None):
    pyEx_active_profile = sys.getprofile()
  sys.setprofile( None )

### Allows the profiler hook to trigger again
def pyEx_profile_restart():
  global pyEx_active_profile
  if (pyEx_active_profile != None):
    sys.setprofile(pyEx_active_profile)

  
#############################
###  EXTRAE API WRAPPERS  ###
#############################

def shutdown():
  if (Extrae):
    Extrae[os.getpid()].Extrae_shutdown()

def restart():
  if (Extrae):
    Extrae[os.getpid()].Extrae_restart()

def event(type, value):
  if (Extrae):
    Extrae[os.getpid()].Extrae_event(type, value)

def nevent(array_of_types, array_of_values):
  if (Extrae):
    nevents = min(len(array_of_types), len(array_of_values))
    types = (ctypes.c_int * nevents)()
    values = (ctypes.c_ulonglong * nevents)()
    for i in range(0, nevents):
      types[i] = array_of_types[i]
      values[i] = array_of_values[i]
    Extrae[os.getpid()].Extrae_nevent(nevents, ctypes.pointer(types), ctypes.pointer(values))

def eventandcounters(type, value):
  if (Extrae):
    Extrae[os.getpid()].@sub_Extrae_eventandcounters@(type, value)

def neventandcounters(array_of_types, array_of_values):
  if (Extrae):
    nevents = min(len(array_of_types), len(array_of_values))
    types = (ctypes.c_int * nevents)()
    values = (ctypes.c_ulonglong * nevents)()
    for i in range(0, nevents):
      types[i] = array_of_types[i]
      values[i] = array_of_values[i]
    Extrae[os.getpid()].@sub_Extrae_neventandcounters@(nevents, ctypes.pointer(types), ctypes.pointer(values))


#############################
###         MAIN          ###
#############################

def startTracing(SelectedLibrary, Multiproc=False):
  global Traced_Functions
  global Number_of_Traced_Functions
  global MultiprocessingEnabled 

  MultiprocessingEnabled = Multiproc

  ### Check the environment variables for the Extrae configuration
  config_file = os.getenv('EXTRAE_CONFIG_FILE')

  if not config_file:
    sys.stderr.write('pyextrae: WARNING! You have to provide a configuration file setting the EXTRAE_CONFIG_FILE environment variable\n');
  else:
    if not os.path.isfile( config_file ):
      sys.stderr.write('pyextrae: ERROR! Can\'t find configuration file \''+config_file+'\'\n');
      sys.exit(1)

  if (MultiprocessingEnabled):
    ### Clean files from previous executions
    old_files = glob.glob("set-*/*")
    for f in old_files:
      os.unlink(f);

    ### The subprocesses can't load the same library as the host because they
    ### are forked and the library is already loaded and initialized, so we
    ### copy it with a different name to make it believe it's a new one
    shutil.copy(LibrarySeq, LibrarySubProc)

  ### Load Extrae in the parent process
  print ("pyextrae: Loading tracing library '" + SelectedLibrary + "'")
  Extrae[os.getpid()] = LoadExtrae(ExtraeHome + "/lib/" + SelectedLibrary)

  ### Parse the configuration file to look for the user-functions configuration
  if config_file:
    doc       = parse(config_file)
    xml_UF    = doc.getElementsByTagName('user-functions')
    enabled   = xml_UF[0].getAttributeNode('enabled')
    func_list = xml_UF[0].getAttributeNode('list')

    ### Check if the user-functions section is enabled and a list is provided
    if enabled and str.lower(str(enabled.nodeValue)) == "yes" and func_list and os.path.isfile( func_list.nodeValue ):
      ### Load the functions to trace from the list
      Traced_Functions = [line.strip() for line in open(func_list.nodeValue)]
      Number_of_Traced_Functions = len(Traced_Functions)

    if ((Number_of_Traced_Functions > 0) or (MultiprocessingEnabled)):
      ### Install the tracing hook if there's functions to trace
      sys.setprofile( pyEx_trace_hook )

  ### Register the exit handler for the parent process
  atexit.register(pyEx_trace_fini, Master=True)


def startProfiling():
  sys.setprofile( pyEx_profile_hook )
  atexit.register( pyEx_profile_fini )
   


